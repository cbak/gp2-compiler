# Compile time object files
COBJECTS = gpparser.tab.o lex.yy.o ast.o pretty.o seman.o transform.o graph.o rule.o stack.o generate.o main.o

# Runtime object files.
ROBJECTS = runtime.o Global_rule1.o init_runtime.o match.o graph.o rule.o stack.o

OBJECTS = $(COBJECTS) $(ROBJECTS)

CC = gcc
CFLAGS = -g -Wall -Wextra `pkg-config --cflags --libs glib-2.0`
#CFLAGS = -g -Wall -Wextra -I/local/d0p6/chrisbak/root/include/glib-2.0 -I/local/d0p6/chrisbak/root/lib/glib-2.0/include
LFLAGS = -lglib-2.0
VALGRIND = G_SLICE=always-malloc G_DEBUG=gc-friendly valgrind --tool=memcheck --leak-check=full --leak-resolution=high --track-origins=yes

# Builds the parser and code generator, runs it on the passed GP2 program/host graph files,
# and executes the generated code.
# Usage: make all F1=<path_to_program_file> F2=<path_to_host_graph_file>
all:		$(OBJECTS)
		$(CC) $(COBJECTS) $(LFLAGS) -o GP2-compile
		./GP2-compile $(F1) $(F2)
		$(CC) $(ROBJECTS) $(LFLAGS) -o GP2-run
		./GP2-run

# Builds the parser and the code generator.
compile:	$(COBJECTS)
		$(CC) $(COBJECTS) $(LFLAGS) -o GP2-compile

# Builds the parser and the code generator. Runs the executable with a call to valgrind.
compile-debug:	$(COBJECTS)
		$(CC) $(COBJECTS) $(LFLAGS) -o GP2-compile 	
		$(VALGRIND) --suppressions=GNOME.supp/glib.supp ./GP2-compile $(F1) $(F2)

# Builds the executable GP2 program from code generated by compile/compile-debug.
runtime:	$(ROBJECTS)
		$(CC) $(ROBJECTS) $(LFLAGS) -o GP2-run 	

# Builds the executable GP2 program from code generated by compile/compile-debug.
# Runs the executable with a call to valgrind.
runtime-debug:	$(ROBJECTS)
		$(CC) $(ROBJECTS) $(LFLAGS) -o GP2-run 	
		$(VALGRIND) --suppressions=GNOME.supp/glib.supp ./GP2-run

clean:
		rm *.o gpparser.tab.c gpparser.tab.h lex.yy.c GP2-run GP2-compile

# Compiler objects
gpparser.tab.o: gpparser.tab.c gpparser.tab.h
		$(CC) $(CFLAGS) -c gpparser.tab.c

gpparser.tab.c gpparser.tab.h: gpparser.y ast.h
		bison -dtv gpparser.y

lex.yy.o: 	lex.yy.c 
		$(CC) $(CFLAGS) -c lex.yy.c

lex.yy.c:	gplexer.lex gpparser.tab.h ast.h 
		flex gplexer.lex

ast.o: 		ast.c ast.h globals.h
		$(CC) $(CFLAGS) -c ast.c

pretty.o:       pretty.c pretty.h ast.h globals.h seman.h
		$(CC) $(CFLAGS) -c pretty.c

seman.o:	seman.c seman.h ast.h globals.h
		$(CC) $(CFLAGS) -c seman.c

graph.o:	graph.c globals.h stack.h graph.h 
		$(CC) $(CFLAGS) -c graph.c

rule.o:		rule.c globals.h graph.h rule.h
		$(CC) $(CFLAGS) -c rule.c

transform.o:	transform.c ast.h globals.h graph.h rule.h transform.h 
		$(CC) $(CFLAGS) -c transform.c

stack.o:	stack.c globals.h stack.h
		$(CC) $(CFLAGS) -c stack.c

generate.o:	generate.c ast.h globals.h rule.h generate.h
		$(CC) $(CFLAGS) -c generate.c


# Runtime objects
runtime.o:	runtime.c globals.h graph.h Global_rule1.h init_runtime.h runtime.h
		$(CC) $(CFLAGS) -c runtime.c

match.o:	match.c globals.h graph.h match.h 
		$(CC) $(CFLAGS) -c match.c

init_runtime.o:	init_runtime.c graph.h macros.h rule.h init_runtime.h 
		$(CC) $(CFLAGS) -c init_runtime.c
		
Global_rule1.o:	Global_rule1.c Global_rule1.h graph.h macros.h match.h
		$(CC) $(CFLAGS) -c Global_rule1.c 

